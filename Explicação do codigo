Analise herança e polimorfismo aplicados no projeto CarsMoved.

Herança
No projeto CarsMoved, a classe VeiculoBase é a classe base, da qual as classes específicas Carro e Moto herdam.

python

class Carro(VeiculoBase):
    # ...

class Moto(VeiculoBase):
    # ...
Ambas Carro e Moto herdam características e comportamentos básicos de VeiculoBase, como modelo, cor e métodos como acelerar e desacelerar.

Polimorfismo
  No projeto, temos um exemplo nos métodos acelerar e desacelerar:

python

class Carro(VeiculoBase):
    def acelerar(self, incremento):
        super().set_velocidade_atual(super().get_velocidade_atual() + 2 * incremento)

    def desacelerar(self, decremento):
        super().set_velocidade_atual(super().get_velocidade_atual() - decremento)

class Moto(VeiculoBase):
    def acelerar(self, incremento):
        super().set_velocidade_atual(super().get_velocidade_atual() + incremento)

    def desacelerar(self, decremento):
        super().set_velocidade_atual(super().get_velocidade_atual() - 2 * decremento)
Cada classe derivada (Carro e Moto) implementa seus próprios métodos acelerar e desacelerar, adaptando o comportamento conforme necessário. 

Encapsulamento
As propriedades na classe VeiculoBase são encapsuladas usando métodos getters e setters para garantir o acesso controlado aos atributos privados.

python

class VeiculoBase:
    # ...
    
    def get_velocidade_atual(self):
        return self.__velocidade_atual

    def set_velocidade_atual(self, velocidade_atual):
        self.__velocidade_atual = velocidade_atual

Os métodos getters e setters fornecem uma camada de abstração, permitindo que o estado interno da classe seja modificado de maneira controlada.

Esses conceitos trabalham em conjunto para criar uma estrutura flexível, modular e fácil de entender no projeto CarsMoved!
